{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","state","isEditing","task","props","handleRemove","removeTodo","id","toggleForm","setState","handleUpdate","evt","preventDefault","updateTodo","handleChange","target","name","value","handleToggle","toggleTodo","this","className","onSubmit","type","onChange","completed","onClick","class","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","create","newTodo","remove","filter","t","update","updatedTask","updatedTodos","map","todo","toggleCompletion","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fa1a71a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Todo.css'\r\n\r\nexport default class Todo extends Component{\r\n    state = {\r\n        isEditing: false,\r\n        task: this.props.task\r\n    }\r\n\r\n    handleRemove = () => {\r\n        this.props.removeTodo(this.props.id)\r\n    }\r\n\r\n    toggleForm = () => {\r\n        this.setState({isEditing: !this.state.isEditing})\r\n    }\r\n    handleUpdate = (evt) => {\r\n        evt.preventDefault()\r\n        this.props.updateTodo(this.props.id, this.state.task)\r\n        this.setState({isEditing: false})\r\n    }\r\n    handleChange = (evt) => {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n    handleToggle = (evt) =>{\r\n        this.props.toggleTodo(this.props.id)\r\n    }\r\n\r\n    render(){\r\n        let result\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <div className='Todo'>\r\n                    <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n                        <input type='text' value={this.state.task} name='task' onChange={this.handleChange} />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className='Todo'>\r\n                    <li className={this.props.completed ? 'Todo-task completed' : 'Todo-task'} onClick={this.handleToggle}>\r\n                        {this.props.task}\r\n                    </li>\r\n                    <div className='Todo-buttons'>\r\n                        <button onClick={this.toggleForm}>\r\n                            <i class='fas fa-pen'/>\r\n                        </button>\r\n                        <button onClick={this.handleRemove}>\r\n                            <i class='fas fa-trash'/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return result\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport uuid from 'uuid/v4'\r\nimport './NewTodoForm.css'\r\n\r\nexport default class NewTodoForm extends Component{\r\n    state = {\r\n        task: ''\r\n    }\r\n\r\n    handleChange = (evt) => {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n    handleSubmit = (evt) => {\r\n        evt.preventDefault()\r\n        this.props.createTodo({...this.state, id: uuid(), completed: false })\r\n        this.setState({task: ''})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n                <label htmlFor='task'>New Todo</label>\r\n                <input \r\n                    type='text' \r\n                    placeholder='New Todo' \r\n                    id='task'\r\n                    name='task'\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                     />\r\n                     <button>Add Todo</button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Todo from './Todo'\r\nimport NewTodoForm from './NewTodoForm'\r\nimport './TodoList.css'\r\n\r\nexport default class TodoList extends Component{\r\n    state = {\r\n        todos: []\r\n    }\r\n\r\n    create = (newTodo) => {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        })\r\n    }\r\n\r\n    remove = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        })\r\n    }\r\n    update = (id, updatedTask) => {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                // nadpisuje tylko props task\r\n                return{...todo, task: updatedTask}\r\n            }\r\n            // jezeli nie to zwracamy todo niezmienione\r\n            return todo;\r\n        })\r\n        this.setState({todos: updatedTodos})\r\n    }\r\n\r\n    toggleCompletion = (id) => {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                // nadpisuje tylko props task\r\n                return{...todo, completed: !todo.completed}\r\n            }\r\n            // jezeli nie to zwracamy todo niezmienione\r\n            return todo;\r\n        })\r\n        this.setState({todos: updatedTodos})\r\n    }\r\n\r\n    render(){\r\n        const todos = this.state.todos.map(todo => {\r\n            return (\r\n                 <Todo \r\n                    key={todo.id} \r\n                    id={todo.id} \r\n                    task={todo.task} \r\n                    completed={todo.completed}\r\n                    removeTodo={this.remove}\r\n                    updateTodo={this.update}\r\n                    toggleTodo={this.toggleCompletion}\r\n                />\r\n            )\r\n        })\r\n        return(\r\n            <div className='TodoList'>\r\n                <h1>\r\n                    TodoList <span>A Simple React Todo List App</span>\r\n                </h1>\r\n                <ul>{todos}</ul>\r\n                <NewTodoForm createTodo={this.create}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport TodoList from './TodoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}